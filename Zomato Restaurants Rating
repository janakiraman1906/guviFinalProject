import pandas as pd

# Step 1: Read the dataset and understand each feature
url = "https://drive.google.com/file/d/1lYh6gdSDDMXY0zLsNNuDSc88NDjXdHfI/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
df = pd.read_csv(path)

# Display first few rows of the dataset
print(df.head())

# Explore dataset info, describe, and find columns with categories and numeric columns
print(df.info())
print(df.describe())
print("Categorical Columns:", df.select_dtypes(include=['object']).columns)
print("Numeric Columns:", df.select_dtypes(include=['number']).columns)

# Step 2: Data Cleaning
# Delete redundant columns
df.drop(['url', 'address', 'phone'], axis=1, inplace=True)

# Rename columns
df.rename(columns={'approx_cost(for two people)': 'cost_for_two'}, inplace=True)

# Drop duplicates
df.drop_duplicates(inplace=True)

# Clean individual columns
# Convert 'cost_for_two' to numeric
df['cost_for_two'] = df['cost_for_two'].str.replace(',', '').astype(float)

# Remove NaN values
df.dropna(inplace=True)

# Step 3: Data Visualization
# Rest of the tasks involve exploring the data visually, which can be done using libraries like matplotlib and seaborn.

# Step 4: Machine Learning
# We'll proceed with feature selection, preprocessing, model training, and evaluation for predicting restaurant ratings.
# This involves splitting the dataset into features and target, encoding categorical variables, selecting features, training the model, and evaluating its performance.
# Here's a simplified example:

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Feature selection and preprocessing
X = df[['online_order', 'book_table', 'cost_for_two', 'votes']]
y = df['rate']

# Encode categorical variables
label_encoder = LabelEncoder()
X['online_order'] = label_encoder.fit_transform(X['online_order'])
X['book_table'] = label_encoder.fit_transform(X['book_table'])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)
